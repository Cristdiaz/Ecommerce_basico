Días 11, 12 y 13 de julio.


##################################     DIA 1     #######################################


1. CREAR EL PROYECTO:

a. rails new Ecommerce
cd Ecommerce

Si queremos programar en español debemos ir a config/initializers/inflections.rb
Ahí pondremos en singular y en plural las palabras en español que utilizaremos,
o copiaremos el contenido del initializer de este proyecto para poder programar TODO en
español, no solo algunos datos. 


b. Hacer las tablas:

rails g scaffold Categoria nombre:string
Revisar migraciones db/migrate  que todo esté bien, el uso de plural y singular y además los datos 
de la tabla y sus tipos. 
rails db:migrate

rails g scaffold Producto nombre:string descripcion:text stock:integer precio:decimal sku:string

Al igual que el anterior revisar el contenido de la migración, corregir lo necesario y luego dar:
rails db:migrate


2. RELACIONAR AMBAS TABLAS CON HABTM.

Crear una tabla join que sea el conector entre ambos modelos y agregar la instrucción 
has_and_belongs_to_many en cada uno de los modelos involucrados.


a. Creamos la tabla intermedia que unirá a la otras 2:

rails g migration CreateJoinTableProductoCategoria producto categoria
Así debería quedar este archivo:

class CreateJoinTableCategoriaProducto < ActiveRecord::Migration[7.0]
  def change
    create_join_table :categorias, :productos do |t|
      t.index [:categoria_id, :producto_id]
      t.index [:producto_id, :categoria_id]
    end
  end
end

rails db:migrate


b.  Editaremos los modelos Producto y Categoria de tal
manera que agregaremos has_and_belongs_to_many a cada uno de ellos.

app/models/producto.rb

class Producto < ApplicationRecord
    has_and_belongs_to_many :categorias
end

app/models/category.rb

class Categoria < ApplicationRecord
    has_and_belongs_to_many :productos
end


c. Ir al localhost:3000 y verificar que solo hay un formulario de producto, pero no categorías.


d.Ir a vista _form.html.erb de los productos y agregaremos la siguiente porción de
código que sirve de conector con las categorías.

<div class="field">
  <%= form.label :categorias %>
    <%= form.collection_check_boxes :categoria_ids, Categoria.all,
    :id, :nombre do |b| %>
  <%= b.check_box + b.text %> 
</div>


e. Para que estos cambios sean guardados, debemos agregar en el controlador la instrucción
necesaria para poder recibir los parámetros asociados a las categorías. Debemos recordar
que Rails filtra los parámetros que recibe desde el formulario para evitar problemas de
seguridad asociados a la asignación de parámetros. Agregaremos a los strong params
categoria_ids para que sean procesados en el controlador. Editaremos el controlador de
productos y el método product_params quedará como sigue:

app/controllers/productos_controller.rb

class ProductosController < ApplicationController
 before_action :set_producto, only: %i[ show edit update destroy ]

...
# Only allow a list of trusted parameters through.
    def producto_params
      params.require(:producto).permit(:nombre, :descripcion, :stock, :precio, :sku, categoria_ids: [])
    end



3. ALMACENAR DATOS PREDERTERMINADOS:

Usando archivos Ruby podemos agregar datos que serán insertados en la base
de datos usando el comando Rails db:seed. Serán los datos iniciales con los que comenzaremos.


a. Es una buena práctica separar en otros archivos seeds según el contexto
y cada uno de estos archivos ser invocados desde el archivo seeds.rb.
Hacemos para esto una nueva carpeta llamada seeds, y en ella haremos los 
archivos para introducir nuestros datos por separado. Los que serán
involucrados desde el archivo seeds.rb. Generamos en la nueva carpetaun archivo para
categorias y otro para productos.

Así creamos desde consola nuestra nueva carpeta:

mkdir db/seeds


b. Luego crearemos el archivo categories.rb dentro del directorio recién creado y agregaremos
el siguiente contenido:

db/seeds/categoriASs.rb

Categoria.create(nombre: 'Pasteles')
Categoria.create(nombre: 'Galletas')
Categoria.create(nombre: 'Gelatina')
Categoria.create(nombre: 'Bolleria')


c. Luego crearemos un nuevo archivo en el mismo directorio llamado products.rb y agregaremos el
siguiente contenido:

db/seeds/productos.rb

c1 = Categoria.find_by(nombre: 'Pasteles')
c2 = Categoria.find_by(nombre: 'Galletas')
c3 = Categoria.find_by(nombre: 'Gelatina')

p1 = Producto.create(nombre: 'Torta tres leches', descripcion: 'Descripción2', stock: rand(6..12), precio: rand(50000..100000), sku: 'AEIK001')
p1.categorias << c1
p1.categorias << c2

(Así podemos crear 10 productos más)

El archivo db/seeds/productos.rb nos permite crear un producto y a la vez asignarle la
categoría. 


d. Para unir estos dos archivos y relaciionar estos contenidos vamos adb/seeds.rb
y agregamos el siguiente código:

Dir[File.join(Rails.root, 'db', 'seeds', '*.rb')].sort.each { |seed| load seed }


e. Ejecutar rails db:seed


f. Revisar el localhost:3000, ahí deberíamos tener todos los datos ingresados



4. PROTEGER NUESTROS RECURSOS CON LA GEMA DEVISE.


AUTHENTICATION es el procedimiento para que solo algunos usuarios puedan acceder acceder
distintas vistas de nuestro proyecto, y sus funciones también se vena limitadas.
Acá lo haremos con DEVISE


a. En Gemfile:  gem "devise" agregar al final del doc.
bundle
rails generate devise:install

Y seguir los pasos que aparecen en consola para terminar de instalar.

a. Pegar en config/environment/development.rb el link del paso 1.
b. Pegar en app/views/layouts/application.html.erb los 2 rails del paso 2 dentro del body sobre yield.
c. En config/routes.rb poner root 'home#index' como página central,
   no está habilitado aún.


b. Generaremos la BD para los administradores del proyecto:

rails generate (o g) devise Administrador       --> funciona como un scaffold
rails db:migrate
rails s
localhost:3000/admins/sign_in                   --> pantalla login para administradores


c. Para proteger los recursos y que solo los administradores puedan operar sobre ellos,
modificaremos el archivo routes.rb y utilizaremos una de las tantas funcionalidades que
tiene Devise. Nuestro archivo de rutas quedará como sigue:

Rails.application.routes.draw do
    devise_for :adminsistradores
    root to: "home#index"
    
    authenticate :administrador do
        resources :productos
        resources :categorias
    end

    # For details on the DSL available within this file, see
    http://guides.rubyonrails.org/routing.html
end

De esta manera, cuando alguien ingresa a alguno de los recursos sin estar logueado, la
persona es redirigida al formulario de login para administradores.



##################################     DIA 2     #######################################

5. ESTRUCTURANDO EL E-COMMERCE:

Tenemos los modelos Categorías y Productos, pero nos falta todo lo relacionado al proceso de compras y el carro.
Tenemos que hacer dos modelos nuevos, Order que representa el carro o la orden de compra y Usuario, que es quien
realizará la compra. 


a. Hacemos el mismo procedimiento anterior con devise para crear la vista del Usuario que realizará la compra:

rails g devise Usuario
rails db:migrate

b. Hacer el modelo de Orden: 

rails g model Order usuario:references numero:string total:decimal estado:string
rails db:migrate

Y esto nos crea el modelo, la migración y el esqueleto para los test unitarios, corremos Rails
db:migrate y ya estaremos listo para comenzar nuestro desarrollo usando TDD.


c. Implementando los test TDD:

Antes de hacer los tests, tendremos que crear algunos objetos con datos predeterminados o
fixtures para cubrir los casos de User y Admin, ya que fueron creados con Devise y debemos
asegurarnos que Rails levante el ambiente de pruebas de manera correcta


a-1. Editaremos los archivos test/fixtures/usuarios.yml y test/fixtures/administradores.yml y luego,
agregamos un par de líneas, de manera que quede solo el siguiente contenido:


# usuarios:
one: 
  email:      primer_usuario@ejemplo.com
two:
  email:      segundo_usuario@ejemplo.com
  
#administrador:
one: 
  email: admin1@correo.com
two: 
  email: admin2@correo.com


b-1. Hacer las pruebas e test/models/order_test.rb

require "test_helper"

class OrdenTest < ActiveSupport::TestCase
  test 'Crear un número al azar cuando creo una orden' do
      
    #Arrange/Preparar
      usuario = Usuario.create(email: "usuario@ejemplo.com", password: "Holaola")
      #Act/Actuar
      orden = Orden.create(usuario_id: usuario.id)
      #Assert/Afirmar
      orden_duplicada = orden.dup  #de duplicar
      assert_not orden_duplicada.valid?  #No puede guardarse una orden duplicada
  end

SE RESUELVE ASÍ en models/order.rb:

before_create -> { generar_numero(tam_hash) }
belongs_to :usuario

def generar_numero(tam_hash)
    self.numero ||= loop do
      random = generar_codigo_candidato(tam_hash)
      break random unless self.class.exists?(numero: random)
    end
  end

def generar_codigo_candidato(tam)
    "#{prefijo_hash}#{Array.new(tam){rand(tam)}.join}"
  end
  
  def prefijo_hash
    "BO"
  end
  
  def tam_hash
    5
  end


  test 'Agregar producto a la orden' do
      
    #Arrange/Preparar
      usuario = Usuario.create(email: "usuario@ejemplo.com", password: "Holaola")
      #Crear la orden:
      orden = Orden.create(usuario_id: usuario.id)
      #Crear producto:
      producto = producto(:p1)
      producto = Producto.create(nombre'p1', precio: 100, stock: 8, SKU: 'AKDJ12')
      #Actuar:
      orden.agregar_producto(producto.id, 1)
      #Assert/Afirmar
      assert_equal orden.detalles_ordenes.count, 1
  end

ESTO SE RESUELVE ASÍ:

validates :numero, uniqueness: true



  test 'Número de la orden debe ser único' do
      
    #Arrange/Preparar
      usuario = Usuario.create(email: "usuario@ejemplo.com", password: "Holaola")
      #Act/Actuar
      orden = Orden.create(usuario_id: usuario.id)
      #Assert/Afirmar
      assert !orden.numero.nil? #Si es diferente de nil
  end
  
  test 'No agregar productos con 0 stock' do
    # Preparar
    usuario = Usuario.create(email: 'usuario@correo.com', password: '1q2we34r')
    orden = Orden.create(usuario_id: usuario.id)
    producto_sin_stock = Producto.create(nombre: 'testp1', precio: 1, stock: 0, sku: 'CM003')
    # Actuar / Ejecutar
    orden.agregar_producto(producto_sin_stock.id, 1)
    # Asertar
    assert_equal orden.detalles_ordenes.count, 0
  end
  
end


c-1 Por cada test en consola:
rails test test/models/order_test.rb

Si la consola arroja error podemos hacer 2 cosas dependiendo de lo que nos diga la consola:

-Podemos agregar la gema "ffi" al final del Gemfile, puede ser debajo de la gem "devise"
    bundle
    rails test test/models/order_test.rb

-Ejecutamos rails db:migrate RAILS_ENV= test

-También podemos borrar la BD con rails db:drop o hacerlo de manera manual en db/development.sqlite3



Continuaremos creando los modelos en nuestro poryecto.
Necesitamos ahora crear un modelo con el detalle de la orden:

rails g migration CreateDetalleOrden cantidad:integer precio:decimal producto:references
orden:references
Revisamos las migraciones y aplicamos rails db:migrate

Vamos a los models:

models/orden.rb
    has_many :detalles_ordenes
    has_many :productos, through: :detalles_ordenes

models/producto.rb
    has_and_belongs_to_many :categorias
    has_many :detalles_ordenes
    has_many :ordenes, through: :detalles_ordenes

models/detalle_orden.rb
    belongs_to :producto
    belongs_to :orden

models/usuario.rb
    has_many :ordenes



##################################     DIA 3     #######################################


5. PONER EL CARRO DE COMPRAS Y AGREGAR PRODUCTOS AL CARRO:

a. Primero agregamos en el test:

 test 'No agregar productos con 0 stock' do
    # Preparar
    usuario = Usuario.create(email: 'usuario@correo.com', password: '1q2we34r')
    orden = Orden.create(usuario_id: usuario.id)
    producto_sin_stock = Producto.create(nombre: 'testp1', precio: 1, stock: 0, sku: 'CM003')
    # Actuar / Ejecutar
    orden.agregar_producto(producto_sin_stock.id, 1)
    # Asertar
    assert_equal orden.detalles_ordenes.count, 0
  end


b. En app/models/orden.rb

def agregar_producto(id_producto, cantidad)
    producto = Producto.find(id_producto)
    if producto && producto.stock > 0 #cambio para que no se pueda vender producto con stock 0
      producto_encontrado = detalles_ordenes.find_by(producto_id: producto.id)
      if producto_encontrado 
        producto_encontrado.cantidad += 1
        producto_encontrado.save
      else
        detalles_ordenes.create(
        producto_id: producto.id, 
        cantidad: cantidad,
        precio: producto.precio
        )
      end
    end
end


c. Crear un nuevo controller para el carro:
app/controllers/carros_controllers.rb

  def update
        producto = params[:carro][:producto_id]
        cantidad = params[:carro][:cantidad]

        orden_actual.agregar_producto(producto, cantidad)

        redirect_to root_url, notice: 'Producto agregado 🤑'
    end

    def show
        @orden = orden_actual
    end


d. Luego en app/controllers/application_controller.rb agregamos:

    def orden_actual
        if current_usuario # preguntar con devise si tenemos una sesión
            orden = Orden.where(usuario_id: current_usuario.id).where(estado: 'creado').last
            if orden.nil?
                orden = Orden.create(usuario: current_usuario, estado: 'creado')
            end
            return orden
        end
        nil
    end


e. Crear la ruta para el carrito:
app/config/routes.rb

resources :carros, only: [:show, :update]


f. En el views/home/index.html.erb agregar debajo:

<%= form_for :carro, url: carro_path(0), method: :put do |f| %>
    <%= f.hidden_field :producto_id, value: producto.id %>
    <%= f.hidden_field :cantidad, value: 1 %>
    <%= f.submit 'Agregar al carrito 🛒', class: 'btn btn-primary btn-sm' %>
<% end %>

Para que se pueda agregar al carro y luego que aparezca un mensaje.


h. Crearemos una vista nueva para el carro:
Creamos la carpeta carro y dentro el archivo show.html.erb para mostrar el contenido del carro:

views/carro/show.html.erb

<div class="card">
    <div class="card-header bg-dark text-light">
        <i class="fa fa-shopping-cart" aria-hidden="true"></i>
        <a href="<%= root_url%>" class="btn btn-outline-info btn-sm pull-right">Continuar comprando</a>
        <div class="clearfix"></div>
    </div>
    <div class="card-body">
        <% @orden.detalles_ordenes.includes(:producto).each do |item| %>
            <div class="row">
                <div class="col-xs-2 col-md-2">
                    <img class="img-responsive" src="http://placehold.it/120x80" alt="prewiew">
                </div>
                <div class="col-xs-4 col-md-6">
                    <h4 class="product-name"><strong>
                            <%= item.producto.nombre %>
                        </strong></h4>
                    <h4><small>
                            <%= item.producto.descripcion %>
                        </small></h4>
                </div>
                <div class="col-xs-6 col-md-4 row">
                    <div class="col-xs-6 col-md-6 text-right" style="padding-top: 5px">
                        <h6><strong>
                                <%= item.precio %> <span class="text-muted">x</span>
                            </strong></h6>
                    </div>
                    <div class="col-xs-4 col-md-4">
                        <%= item.cantidad %>
                    </div>
                    <div class="col-xs-2 col-md-2">
                    </div>
                </div>
            </div>
            <hr>
            <% end %>
    </div>
    <div class="card-footer">
        <a href="#" class="btn btn-success pull-right">Pay</a>
        <div class="pull-right" style="margin: 5px">
            Total: $<b>
            <%= @orden.total %>
            </b>
        </div>
    </div>
</div>


f. Para que en el carro aparezca solo una vez el producto aunque compremos muchos ejemplares:

def agregar_producto(id_producto, cantidad)
    producto = Producto.find(id_producto)
    if producto && producto.stock > 0 #cambio para que no se pueda vender producto con stock 0
      producto_encontrado = detalles_ordenes.find_by(producto_id: producto.id)
      if producto_encontrado 
        producto_encontrado.cantidad += 1
        producto_encontrado.save
      else
        detalles_ordenes.create(
        producto_id: producto.id, 
        cantidad: cantidad,
        precio: producto.precio
        )
      end
    end
  end





###################### MEDIOS DE PAGO ########################

a. Creamos el modelo MetodoPago
rails g model MetodoPago nombre:string codigo:string
rails db:migrate

rails g model Pago estado:string total:decimal token:string orden:references metodo_pago:references 
rails db:migrate


b. Asociaciones en models:

app/models/pago.rb

class Pago < ApplicationRecord
  belongs_to :orden
  belongs_to :metodo_pago
end

app/models/orden.rb

has_many :pagos
has_many :metodos_pago, through: :pagos

app/models/metodo_pago.rb

class MetodoPago < ApplicationRecord
    has_many :pagos
    has_many :ordenes, through: :metodos_pago
end


c. Crear en add/seeds el archivo metodos_pago.rb y en él crear la fórmula para relacionar con Paypal

MetodoPago.create(nombre: 'Paypal Express Checkour', codigo: 'PEC')
Esto lo podemos agregar manualmente en consola con rails c y copiando la fórmula

rails db:seed 


d. Instalar gemas: 
gem 'dotenv-rails', groups: [:development, :test]  #para las opciones de pago
gem 'activemerchant'                               # gestión de pagos 
bundle


e. Luego en config/environment/development.rb agregar:

config.after_initialize do
    ActiveMerchant::Billing::Base.mode = :test
    paypal_options = {
      login: ENV['PAYPAL_LOGIN_EMAIL'],
      password: ENV['PAYPAL_PASSWORD'],
      signature: ENV['PAYPAL_SIGNATURE']
    }
    ::EXPRESS_GATEWAY = ActiveMerchant::Billing::PaypalExpressGateway.new(paypal_options)
  end


f.Modificar show de views/carros

<div class="card">
    <div class="card-header bg-dark text-light">
        <i class="fa fa-shopping-cart" aria-hidden="true"></i>
        <a href="<%= root_url%>" class="btn btn-outline-info btn-sm pull-right">Continuar comprando</a>
        <div class="clearfix"></div>
    </div>
    <div class="card-body">
        <% @orden.detalles_ordenes.includes(:producto).each do |item| %>
            <div class="row">
                <div class="col-xs-2 col-md-2">
                    <img class="img-responsive" src="http://placehold.it/120x80" alt="prewiew">
                </div>
                <div class="col-xs-4 col-md-6">
                    <h4 class="product-name"><strong>
                            <%= item.producto.nombre %>
                        </strong></h4>
                    <h4><small>
                            <%= item.producto.descripcion %>
                        </small></h4>
                </div>
                <div class="col-xs-6 col-md-4 row">
                    <div class="col-xs-6 col-md-6 text-right" style="padding-top: 5px">
                        <h6><strong>
                                <%= item.precio %> <span class="text-muted">x</span>
                            </strong></h6>
                    </div>
                    <div class="col-xs-4 col-md-4">
                        <%= item.cantidad %>
                    </div>
                    <div class="col-xs-2 col-md-2">
                    </div>
                </div>
            </div>
            <hr>
            <% end %>
    </div>
    <div class="card-footer">
        <%= form_for :carro, url: pagar_con_paypal_carro_path(0) do |f| %>
            <%= f.hidden_field :orden_id, value: @orden.id %>
            <%= f.submit 'Pagar', class: 'btn btn-primary btn-sm' %>
        <% end %>

        <div class="pull-right" style="margin: 5px">
            Total: $<b>
            <%= @orden.total %>
            </b>
        </div>
    </div>
</div>



g. Agregar a app/controllers/carros_controller.rb

 # POST
    def pagar_con_paypal
        orden = Orden.find(params[:carro][:orden_id])
        #price must be in cents
        price = 100
        # Aqui llamamos al express gateway que definimos al inicializar
        # que definimos en nuestro archivo config/development.rb y
        # preparamos la compra, donde se nos devolverá un token para
        # identificar esta venta en particular
        response = EXPRESS_GATEWAY.setup_purchase(price,
            ip: request.remote_ip,
            return_url: procesar_pago_paypal_carro_url,
            cancel_return_url: root_url,
            allow_guest_checkout: true,
            currency: "USD"
        )
        payment_method = MetodoPago.find_by(codigo: "PEC")
        # Aquí creamos nuestro registro en la tabla Payment con el
        # payment method de Paypal, y con estado “processing” pues aún
        # está en proceso
        Pago.create(
            orden_id: orden.id,
            metodo_pago_id: payment_method.id,
            estado: "processing",
            total: orden.total,
            token: response.token
        )
        # redirigimos al usuario a Paypal, para que realice el pago
        redirect_to EXPRESS_GATEWAY.redirect_url_for(response.token)
    end
    
    # GET
    def procesar_pago_paypal
        details = EXPRESS_GATEWAY.details_for(params[:token])
        express_purchase_options =
        {
            ip: request.remote_ip,
            token: params[:token],
            payer_id: details.payer_id,
            currency: "USD"
        }
        price = details.params["order_total"].to_d * 100
        response = EXPRESS_GATEWAY.purchase(price, express_purchase_options)
        if response.success?
            payment = Pago.find_by(token: response.token)
            order = payment.orden
            #update object states
            payment.estado = "completed"
            order.estado = "completed"
            ActiveRecord::Base.transaction do
                order.save!
                payment.save!
            end
        end
    end


h. PRUEBAS DE CREDENCIALES DE PAYPAL
Crear archivo .env y agregar:

PAYPAL_LOGIN_EMAIL=sb-xglup18801433_api1.business.example.com
PAYPAL_PASSWORD=3DKKCT8ZRK28GL4H
PAYPAL_SIGNATURE=A-Er.vf-9ZRNVhEXF4593mKl2H5JA.vtmLYJbbI7cPWOrcBEjPbrJaO.


